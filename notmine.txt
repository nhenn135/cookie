#example (not mine)

PATTERN_OF_FILE = 'C\\:\\\\\w+.txt'
PATTERN_OF_LINE = '\w+' + '\\ \\=\\ foo\\(' + '\w+' 	# looking for pattern a = foo(b)
FIRST_VAR = '^\w+'
LINE_TO_INSERT = ' = bar(42)\n'
def insert_in_files():
	'''Insert LINE_TO_INSERT after all lines with pattern PATTERN_OF_LINE in all files with PATTERN_OF_FILE'''
	files = get_files('vs_search_output.txt')
	for f in files:
		insert_lines(f)
	return None

def get_files(path):
	'''Return a set of files from a visual studio search output following a regexp pattern
	
	Format of visual studio search output is the following:
	Find all "pattern to search", Subfolders, Find Results 1, Entire Solution, ""
	  path_to_file.txt(1):		line with text
	  path_to_another_file.txt(22):		line1 some text
	  path_to_another_file.txt(29):		line2 some text
	Matching lines: 2    Matching files: 2    Total files searched: 205
	
	Args:
		path: A path to a file with the search result
		
	Returns:
		A set of all files in search result that match PATTERN_OF_FILE regular expression.
	'''
	from re import search
	from re import escape

	f = open(path, 'r')
	# paths is a set structure with all the different files to look for.
	paths = set()
	count = 0
	for line in f:
		m = search(PATTERN_OF_FILE, line)
		if m:
			paths.add(m.group(0))
	f.close()
	return paths

def insert_lines(path):
	'''Insert a line with 'FIRST_VAR + LINE_TO_INSERT' after each PATTERN_OF_LINE
	
	Go through a file looking for PATTERN_OF_LINE 
	if found, insert a line just after with 'FIRST_VAR + LINE_TO_INSERT'
	
	Args:
		path: a path to a file to search and insert lines if a match is found
	Returns:
		None
	'''
	from re import escape
	from re import search
	fin = open(path, 'r')
	open('output', 'w').close() 	# clear file before processing
	fout = open('output', 'w')
	
	for line in fin:
		fout.write(line)
		match = search(PATTERN_OF_LINE, line)
		if match:
			res = search(FIRST_VAR, line)
			if res:
				fout.write(res.group(0) + LINE_TO_INSERT)
	fin.close()
	fout.close()
	# save file
	ftemp = open('output', 'r')
	try:
		open(path, 'w').close() 	# clear file before processing
	except:
		print('cannot write in file:', path)
		ftemp.close()
		return None
	f = open(path, 'w')
	for line in ftemp:
		f.write(line)
	f.close()
	ftemp.close()
	return None
	